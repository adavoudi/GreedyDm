

import greedydm.*;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JProgressBar;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author alireza
 */
public class GreedyDMG extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form GreedyDMG
     */
    private DownloadsTableModel tableModel;
    private DownloadPack selectedDownload;
    private boolean clearing;
    private DLForm dlForm;
    private Merger merger;

    public GreedyDMG() {
        initComponents();

        tableModel = new DownloadsTableModel();
        tableDownloads.setModel(tableModel);

        tableDownloads.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                tableSelectionChanged();
            }
        });

        // Set up ProgressBar as renderer for progress column.
        ProgressRenderer renderer = new ProgressRenderer(0, 100);
        renderer.setStringPainted(true); // show progress text
        tableDownloads.setDefaultRenderer(JProgressBar.class, renderer);

        dlForm = new DLForm(tableModel, this);
        merger = new Merger();
    }

    // Called when table row selection changes.
    private void tableSelectionChanged() {
        /* Unregister from receiving notifications
         from the last selected download. */
        if (selectedDownload != null) {
            selectedDownload.deleteObserver(GreedyDMG.this);
        }

        /* If not in the middle of clearing a download,
         set the selected download and register to
         receive notifications from it. */
        if (tableDownloads.getSelectedRow() == -1) {
            return;
        }
        if (!clearing) {

            selectedDownload = tableModel.getDownload(tableDownloads.getSelectedRow());
            selectedDownload.addObserver(GreedyDMG.this);
            updateButtons();
        }

    }

    // Add a new download.
    private void actionAdd() {
        dlForm.init();
        dlForm.setVisible(true);
    }

    // Pause the selected download.
    private void actionPause() {
        selectedDownload.pause();
        updateButtons();
    }

    // Resume the selected download.
    private void actionResume() {
        selectedDownload.start();
        updateButtons();
    }

    // Cancel the selected download.
    private void actionCancel() {
        selectedDownload.cancel();
        updateButtons();
    }

    // Clear the selected download.
    private void actionClear() {
        clearing = true;
        tableModel.clearDownload(tableDownloads.getSelectedRow());
        clearing = false;
        selectedDownload = null;
        updateButtons();
    }

    /* Update each button's state based off of the
     currently selected download's status. */
    private void updateButtons() {
        if (selectedDownload != null) {

            switch (selectedDownload.getStatus()) {
                case DOWNLOADING:
                    btnPause.setEnabled(true);
                    btnStart.setEnabled(false);
                    btnCancel.setEnabled(true);
                    btnClear.setEnabled(false);
                    break;
                case PAUSED:
                    btnPause.setEnabled(false);
                    btnStart.setEnabled(true);
                    btnCancel.setEnabled(true);
                    btnClear.setEnabled(false);
                    break;
                case ERROR:
                    btnPause.setEnabled(false);
                    btnStart.setEnabled(true);
                    btnCancel.setEnabled(false);
                    btnClear.setEnabled(true);
                    break;
                default: // COMPLETE or CANCELLED
                    btnPause.setEnabled(false);
                    btnStart.setEnabled(false);
                    btnCancel.setEnabled(false);
                    btnClear.setEnabled(true);
            }
        } else {
            // No download is selected in table.
            btnPause.setEnabled(false);
            btnStart.setEnabled(false);
            btnCancel.setEnabled(false);
            btnClear.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tableDownloads = new javax.swing.JTable();
        btnStart = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnMerger = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableDownloads.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tableDownloads);

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnAdd.setText("Add URL");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnMerger.setText("Merger");
        btnMerger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMergerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPause)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMerger)
                        .addGap(0, 285, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnCancel, btnClear, btnPause, btnStart});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnStart)
                    .addComponent(btnPause)
                    .addComponent(btnCancel)
                    .addComponent(btnClear)
                    .addComponent(btnMerger))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        actionAdd();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        actionClear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        actionResume();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        actionPause();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnMergerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMergerActionPerformed
        merger.init();
        merger.setVisible(true);
    }//GEN-LAST:event_btnMergerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        new GreedyDMG().setVisible(true);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnMerger;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnStart;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableDownloads;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object o1) {
        // Update buttons if the selected download has changed.
        if (selectedDownload != null && selectedDownload.equals(o)) {
            updateButtons();
        }
    }
}
